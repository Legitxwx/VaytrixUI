local UILibrary = {}

function UILibrary:CreateWindow(title, keybind)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "VaytrixUI"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 400, 0, 300)
    Frame.Position = UDim2.new(0.5, -200, 0.5, -150)
    Frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Frame.Parent = ScreenGui

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0, 50)
    Title.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    Title.Text = title
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.Parent = Frame

    -- Keybind to show/hide UI
    local UserInputService = game:GetService("UserInputService")
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == keybind then
            ScreenGui.Enabled = not ScreenGui.Enabled
        end
    end)

    -- Tab storage
    local Tabs = {}

    -- Create Tab function
    function UILibrary:CreateTab(name)
        local Tab = Instance.new("Frame")
        Tab.Size = UDim2.new(1, 0, 1, -50)
        Tab.Position = UDim2.new(0, 0, 0, 50)
        Tab.BackgroundTransparency = 1
        Tab.Parent = Frame
        Tabs[name] = Tab
        return Tab
    end

    -- Switch Tab function
    function UILibrary:SwitchTab(name)
        for tabName, tab in pairs(Tabs) do
            tab.Visible = (tabName == name)
        end
    end

    return Frame
end

function UILibrary:CreateButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 40)
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.Text = text
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Parent = parent

    button.MouseButton1Click:Connect(function()
        callback()
    end)
end

function UILibrary:CreateToggle(parent, text, callback)
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 200, 0, 40)
    toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggle.Text = text .. " [OFF]"
    toggle.TextColor3 = Color3.new(1, 1, 1)
    toggle.Parent = parent

    local state = false
    toggle.MouseButton1Click:Connect(function()
        state = not state
        toggle.Text = text .. (state and " [ON]" or " [OFF]")
        callback(state)
    end)
end

function UILibrary:CreateSlider(parent, text, min, max, default, callback)
    local slider = Instance.new("TextButton")
    slider.Size = UDim2.new(0, 200, 0, 40)
    slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    slider.Text = text .. ": " .. default
    slider.TextColor3 = Color3.new(1, 1, 1)
    slider.Parent = parent

    local value = default
    slider.MouseButton1Click:Connect(function()
        value = math.clamp(value + 1, min, max)
        slider.Text = text .. ": " .. value
        callback(value)
    end)
end

function UILibrary:CreateDropdown(parent, text, options, callback)
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(0, 200, 0, 40)
    dropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    dropdown.Text = text .. " [Select]"
    dropdown.TextColor3 = Color3.new(1, 1, 1)
    dropdown.Parent = parent

    local selected = options[1] or "None"
    dropdown.MouseButton1Click:Connect(function()
        selected = options[(table.find(options, selected) % #options) + 1]
        dropdown.Text = text .. " [" .. selected .. "]"
        callback(selected)
    end)
end

return UILibrary
